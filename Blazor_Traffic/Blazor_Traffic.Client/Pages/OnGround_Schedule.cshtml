@using Blazor_Traffic.Shared
@using Blazor_Traffic.Client.Helpers
@page "/onground_schedule"
@inject HttpClient Http

<div class="container">
    <div class="row">
        <div class="col-md-10 col-sm-6">
            <input id="stopName" class="form-control typeahead" type="text" autocomplete="off" placeholder="Търсене на спирка" bind="@StopText" onclick="@(() => this.StopText = string.Empty)" />
            <input id="selectedStop" type="text" hidden />
            <input id="coordinatesX" type="text" hidden />
            <input id="coordinatesY" type="text" hidden />
        </div>
        <div class="col-md-2 col-sm-6">
            <button class="form-control btn btn-primary" onclick="@SearchForStop">Покажи</button>
        </div>
    </div>
    @if (Switch)
    {
        <div class="row">
            <div class="col-md-12 col-sm-12">
            <p><em>Зареждане на времена на пристигане...</em></p>
            </div>
        </div>
    }
</div>


@if (transports != null)
{
    <div class="container">
        <div class="row">
            <Schedule_List Railways="@railways" Buses="@buses" Trolleys="@trolleys">Изчислени в: @Stamp</Schedule_List>
        </div>
    </div>
}

<div class="container">
    <div class="row px-4">
        <div id="map"></div>        
    </div>
    <br />
</div>

@functions {
    StopTimes[] transports;

    StopTimes[] railways;

    StopTimes[] buses;

    StopTimes[] trolleys;

    private string StopText { get; set; }

    private bool Switch { get; set; }

    private string Stamp { get; set; }

    protected override async Task OnInitAsync()
    {
        await JSRuntime.Current.InvokeAsync<object>("searchByTerm");
    }

    private async Task<string> GetSelectionValue()
    {
        return await JSRuntime.Current.InvokeAsync<string>("returnSelection");
    }

    private async Task SearchForStop()
    {
        Switch = true;

        var selection = await GetSelectionValue();

        var obj = new StopCodeId { StopCode = selection };

        transports = await Http.PostJsonAsync<StopTimes[]>("api/Traffic/StopTimes", obj);

        railways = transports
            .Where(type => type.Type == 0)
            .OrderBy(r => r.LineName, new CustomComparer())
            .ToArray<StopTimes>();

        buses = transports
            .Where(type => type.Type == 1)
            .OrderBy(b => b.LineName, new CustomComparer())
            .ToArray<StopTimes>();

        trolleys = transports
            .Where(type => type.Type == 2)
            .OrderBy(t => t.LineName, new CustomComparer())
            .ToArray<StopTimes>();

        Switch = false;

        Stamp = DateTime.Now.AddHours(2).ToLongTimeString();

        await JSRuntime.Current.InvokeAsync<object>("initMap");
    }
}